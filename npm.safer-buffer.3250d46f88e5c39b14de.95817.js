(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["npm.safer-buffer"],{c591:function(e,r,t){"use strict";(function(r){var n,o=t("b639"),f=o.Buffer,i={};for(n in o)o.hasOwnProperty(n)&&"SlowBuffer"!==n&&"Buffer"!==n&&(i[n]=o[n]);var a=i.Buffer={};for(n in f)f.hasOwnProperty(n)&&"allocUnsafe"!==n&&"allocUnsafeSlow"!==n&&(a[n]=f[n]);if(i.Buffer.prototype=f.prototype,a.from&&a.from!==Uint8Array.from||(a.from=function(e,r,t){if("number"===typeof e)throw new TypeError('The "value" argument must not be of type number. Received type '+typeof e);if(e&&"undefined"===typeof e.length)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);return f(e,r,t)}),a.alloc||(a.alloc=function(e,r,t){if("number"!==typeof e)throw new TypeError('The "size" argument must be of type number. Received type '+typeof e);if(e<0||e>=2*(1<<30))throw new RangeError('The value "'+e+'" is invalid for option "size"');var n=f(e);return r&&0!==r.length?"string"===typeof t?n.fill(r,t):n.fill(r):n.fill(0),n}),!i.kStringMaxLength)try{i.kStringMaxLength=r.binding("buffer").kStringMaxLength}catch(p){}i.constants||(i.constants={MAX_LENGTH:i.kMaxLength},i.kStringMaxLength&&(i.constants.MAX_STRING_LENGTH=i.kStringMaxLength)),e.exports=i}).call(this,t("4362"))}}]);